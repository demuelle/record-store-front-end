import { act, fireEvent, render, screen } from '@testing-library/react';
import Games from './Games';

const games = [
  {
    id: 4,
    title: 'Super Contra',
    esrbRating: 'E',
    description: 'run and gun',
    price: 99.99,
    studio: 'Konami',
    quantity: 2,
  },
  {
    id: 5,
    title: 'Halo 4',
    esrbRating: 'T',
    description: 'FPS',
    price: 49.99,
    studio: '343',
    quantity: 25,
  },
  {
    id: 11,
    title: 'Cyberpunk 2077',
    esrbRating: 'M',
    description: 'Action RPG',
    price: 20.99,
    studio: 'CD Projekt',
    quantity: 22,
  },
  {
    id: 14,
    title: 'Super Mario Bros',
    esrbRating: 'E',
    description: 'arcade',
    price: 99.99,
    studio: 'Nintendo',
    quantity: 25,
  },
];

test('renders filter headings', () => {
  render(<Games />);

  const studioFilters = screen.getByText('Filter by Studio');
  const esrbFilters = screen.getByText('Filter by ESRB Rating');

  expect(studioFilters).toBeInTheDocument();
  expect(esrbFilters).toBeInTheDocument();
});

test('should render 7 total filter checkboxes', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(games),
    })
  );

  await act(async () => {
    render(<Games />);
  });

  expect(screen.getAllByRole('checkbox').length).toBe(7);
});

test('should render proper number of games', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(games),
    })
  );

  let page;
  await act(async () => {
    page = render(<Games />);
  });

  const rows = page.baseElement.querySelectorAll('tbody tr');
  expect(rows.length).toBe(games.length);
});

test('should only show 2 games with "Konami" and "E" filters activated', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(games),
    })
  );

  let page;
  await act(async () => {
    page = render(<Games />);
  });

  fireEvent.click(screen.getByLabelText('Konami'));
  fireEvent.click(screen.getByLabelText('E'));

  const rows = page.baseElement.querySelectorAll('tbody tr');
  expect(rows.length).toBe(1);
});

describe('ROLE_USER', () => {
  test('does not have delete button', async () => {
    await act(async () => {
      render(<Games role="ROLE_USER" />);
    });

    const deleteButtons = Array.from(
      document.querySelectorAll('button')
    ).filter(button => button.innerText === 'Delete');
    expect(deleteButtons.length).toEqual(0);
  });

  test('has order buttons (and no submit for creation)', async () => {
    jest.spyOn(global, 'fetch').mockImplementation(() =>
      Promise.resolve({
        status: 200,
        json: () => Promise.resolve(games),
      })
    );

    let page;
    await act(async () => {
      page = render(<Games role="ROLE_USER" />);
    });

    // There should be no other submit buttons on page (create is hidden)
    const orderButtons = page.baseElement.querySelectorAll(
      'button[type="submit"]'
    );
    expect(orderButtons.length).toEqual(games.length);
  });
});
