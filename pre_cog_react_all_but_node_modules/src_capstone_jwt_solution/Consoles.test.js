import { act, fireEvent, render, screen } from '@testing-library/react';
import Consoles from './Consoles';

const consoles = [
  {
    id: 1,
    model: 'Nintendo Switch',
    manufacturer: 'Nintendo',
    memoryAmount: '4GB',
    processor: 'ARM 4 Cortex-A57',
    price: 299.99,
    quantity: 70,
  },
  {
    id: 2,
    model: 'NES',
    manufacturer: 'Nintendo',
    memoryAmount: '0',
    processor: 'Ricoh 2A03',
    price: 179,
    quantity: 2,
  },
  {
    id: 3,
    model: 'GameCube',
    manufacturer: 'Nintendo',
    memoryAmount: '24 MB of 1T-SRAM ',
    processor: 'IBM PowerPC 7',
    price: 199.99,
    quantity: 9,
  },
  {
    id: 4,
    model: 'Dreamcast',
    manufacturer: 'Sega',
    memoryAmount: '16 MB',
    processor: 'Hitachi SH-4',
    price: 199,
    quantity: 8,
  },
  {
    id: 7,
    model: 'Xbox Series S',
    manufacturer: 'Microsoft',
    memoryAmount: '10 GB',
    processor: '3.6 GHz custom AMD',
    price: 299.99,
    quantity: 3,
  },
];

test('renders filter heading', () => {
  render(<Consoles />);
  const filterElement = screen.getByText('Filter by Manufacturer');
  expect(filterElement).toBeInTheDocument();
});

test('should render 3 filter checkboxes', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(consoles),
    })
  );

  await act(async () => {
    render(<Consoles />);
  });

  expect(screen.getAllByRole('checkbox').length).toBe(3);
});

test('should render 5 consoles', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(consoles),
    })
  );

  let page;
  await act(async () => {
    page = render(<Consoles />);
  });

  const rows = page.baseElement.querySelectorAll('tbody tr');
  expect(rows.length).toBe(5);
});

test('should only show 3 Nintendo consoles when filter is activated', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(consoles),
    })
  );

  let page;
  await act(async () => {
    page = render(<Consoles />);
  });

  fireEvent.click(screen.getByLabelText('Nintendo'));

  const rows = page.baseElement.querySelectorAll('tbody tr');
  expect(rows.length).toBe(3);
});

describe('ROLE_USER', () => {
  test('does not have delete button', async () => {
    await act(async () => {
      render(<Consoles role="ROLE_USER" />);
    });

    const deleteButtons = Array.from(
      document.querySelectorAll('button')
    ).filter(button => button.innerText === 'Delete');
    expect(deleteButtons.length).toEqual(0);
  });

  test('has order buttons (and no submit for creation)', async () => {
    jest.spyOn(global, 'fetch').mockImplementation(() =>
      Promise.resolve({
        status: 200,
        json: () => Promise.resolve(consoles),
      })
    );

    let page;
    await act(async () => {
      page = render(<Consoles role="ROLE_USER" />);
    });

    // There should be no other submit buttons on page (create is hidden)
    const orderButtons = page.baseElement.querySelectorAll(
      'button[type="submit"]'
    );
    expect(orderButtons.length).toEqual(consoles.length);
  });
});
