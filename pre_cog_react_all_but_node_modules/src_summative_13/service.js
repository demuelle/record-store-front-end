const baseUrl = 'http://localhost:8080';
const refreshInterval = 90000;

const service = {
  jwt: '',
  role: '',
  timeout: 0,

  buildInit: function (method, headers, body) {
    const init = {
      method,
      headers: {
        ...headers,
        Authorization: 'Bearer ' + this.jwt,
      },
    };
    if (body) init.body = JSON.stringify(body);
    return init;
  },

  login: async function (credentials) {
    const init = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      body: JSON.stringify(credentials),
    };

    const response = await fetch(`${baseUrl}/authenticate`, init);
    if (response.status !== 200) {
      return Promise.reject('Authentication failed.');
    }

    const json = await response.json();
    this.parseJwt(json['jwt_token']);
  },

  logout: function () {
    this.jwt = '';
    this.role = '';
    clearTimeout(this.timeout);
  },

  refreshToken: async function () {
    const init = this.buildInit('POST', {});

    const response = await fetch(`${baseUrl}/refresh_token`, init);
    if (response.status !== 200) {
      return Promise.reject('Automatic token refresh failed.');
    }

    const json = await response.json();
    this.parseJwt(json['jwt_token']);
  },

  parseJwt: function (jwt, interval = refreshInterval) {
    this.jwt = jwt;
    const segments = jwt.split('.');
    const json = JSON.parse(atob(segments[1]));
    this.role = json.authorities;

    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => this.refreshToken(), refreshInterval);

    sessionStorage.setItem('jwt', jwt);
  },

  clear: function () {
    clearTimeout(this.timeout);
  },

  index: async function (path) {
    const init = this.buildInit('GET', { Accept: 'application/json' });

    const response = await fetch(`${baseUrl}/${path}`, init);
    if (response.status === 200) {
      return response.json();
    }
    return Promise.reject('Could not fetch games.');
  },

  update: async function (path, payload) {
    const init = this.buildInit(
      'PUT',
      { 'Content-Type': 'application/json' },
      payload
    );
    const response = await fetch(`${baseUrl}/${path}`, init);

    if (response.status >= 400) {
      return Promise.reject(`Unable to update!`);
    }

    return true;
  },

  delete: async function (path, id) {
    const response = await fetch(
      `${baseUrl}/${path}/${id}`,
      this.buildInit('DELETE', {})
    );

    if (response.status >= 400) {
      return Promise.reject(`Unable to delete ðŸ”¥.`);
    }

    return true;
  },

  create: async function (path, payload) {
    const init = this.buildInit(
      'POST',
      {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      payload
    );

    const response = await fetch(`${baseUrl}/${path}`, init);

    if (response.status >= 400) {
      return Promise.reject(`Unable to create.`);
    }

    return response.json();
  },
};

let loaded = false;
if (!loaded) {
  loaded = true;
  const jwt = sessionStorage.getItem('jwt');
  if (typeof jwt === 'string') {
    service.parseJwt(jwt, 0);
  }
}

export default service;
