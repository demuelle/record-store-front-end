import { act, fireEvent, render, screen } from '@testing-library/react';
import Shirts from './Shirts';

const shirts = [
  {
    id: 2,
    size: 'XXL',
    color: 'Yellow',
    description: 'Science',
    price: 16.95,
    quantity: 1,
  },
  {
    id: 3,
    size: 'XL',
    color: 'Red',
    description: 'Science',
    price: 15.95,
    quantity: 11,
  },
  {
    id: 4,
    size: 'Med',
    color: 'Green',
    description: 'Science',
    price: 14.95,
    quantity: 11,
  },
];

test('renders filter headings', () => {
  render(<Shirts />);

  const sizeFilter = screen.getByText('Filter by Size');
  const colorFilters = screen.getByText('Filter by Color');

  expect(sizeFilter).toBeInTheDocument();
  expect(colorFilters).toBeInTheDocument();
});

test('should render 6 total filter checkboxes', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(shirts),
    })
  );

  await act(async () => {
    render(<Shirts />);
  });

  expect(screen.getAllByRole('checkbox').length).toBe(6);
});

test('should render proper number of shirts', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(shirts),
    })
  );

  let page;
  await act(async () => {
    page = render(<Shirts />);
  });

  const rows = page.baseElement.querySelectorAll('tbody tr');
  expect(rows.length).toBe(shirts.length);
});

test('should only show 1 Yellow XXL ðŸ‘•s with filter activated', async () => {
  jest.spyOn(global, 'fetch').mockImplementation(() =>
    Promise.resolve({
      status: 200,
      json: () => Promise.resolve(shirts),
    })
  );

  let page;
  await act(async () => {
    page = render(<Shirts />);
  });

  fireEvent.click(screen.getByLabelText('Yellow'));
  fireEvent.click(screen.getByLabelText('XXL'));

  const rows = page.baseElement.querySelectorAll('tbody tr');
  expect(rows.length).toBe(1);
});

describe('ROLE_USER', () => {
  test('does not have delete button', async () => {
    await act(async () => {
      render(<Shirts role="ROLE_USER" />);
    });

    const deleteButtons = Array.from(
      document.querySelectorAll('button')
    ).filter(button => button.innerText === 'Delete');
    expect(deleteButtons.length).toEqual(0);
  });

  test('has order buttons (and no submit for creation)', async () => {
    jest.spyOn(global, 'fetch').mockImplementation(() =>
      Promise.resolve({
        status: 200,
        json: () => Promise.resolve(shirts),
      })
    );

    let page;
    await act(async () => {
      page = render(<Shirts role="ROLE_USER" />);
    });

    // There should be no other submit buttons on page (create is hidden)
    const orderButtons = page.baseElement.querySelectorAll(
      'button[type="submit"]'
    );
    expect(orderButtons.length).toEqual(shirts.length);
  });
});
