const baseUrl = 'http://localhost:8080';
const encounterUrl = `${baseUrl}/api/encounter`;
const investigatorUrl = `${baseUrl}/api/investigator`;

const service = {
  buildInit: function (method, headers, body) {
    const init = {
      method,
      headers: {
        ...headers,
      },
    };
    if (body) init.body = JSON.stringify(body);
    return init;
  },

  findAllEncounters: async function () {
    const response = await fetch(encounterUrl);
    if (response.status === 200) {
      return response.json();
    }
    return Promise.reject('Could not fetch Encounters.');
  },

  addEncounter: async function (encounter) {
    const init = this.buildInit(
      'POST',
      {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      encounter
    );

    const response = await fetch(encounterUrl, init);
    if (response.status === 201) {
      return response.json();
    }
    return Promise.reject('Encounter was not created.');
  },

  updateEncounter: async function (encounter) {
    const init = this.buildInit(
      'PUT',
      { 'Content-Type': 'application/json' },
      encounter
    );

    const response = await fetch(`${encounterUrl}/${encounter.id}`, init);
    if (response.status === 204) {
      return Promise.resolve();
    }
    return Promise.reject('Encounter was not updated.');
  },

  deleteEncounterById: async function (id) {
    const response = await fetch(
      `${encounterUrl}/${id}`,
      this.buildInit('DELETE', {})
    );

    if (response.status !== 204) {
      return Promise.reject('Encounter not deleted.');
    }
  },

  findAllInvestigators: async function () {
    const init = this.buildInit('GET', { Accept: 'application/json' });

    const response = await fetch(investigatorUrl, init);
    if (response.status === 200) {
      return response.json();
    }

    return Promise.reject('Could not fetch Investigators.');
  },

  addInvestigator: async function (investigator) {
    const init = this.buildInit(
      'POST',
      {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      investigator
    );

    const response = await fetch(investigatorUrl, init);
    if (response.status === 201) {
      return response.json();
    }
    return Promise.reject('Investigator was not created.');
  },

  updateInvestigator: async function (investigator) {
    const init = this.buildInit(
      'PUT',
      { 'Content-Type': 'application/json' },
      investigator
    );

    const response = await fetch(`${investigatorUrl}/${investigator.id}`, init);
    if (response.status === 204) {
      return Promise.resolve();
    }
    return Promise.reject('Investigator was not updated.');
  },

  deleteInvestigatorById: async function (id) {
    const response = await fetch(
      `${investigatorUrl}/${id}`,
      this.buildInit('DELETE', {})
    );

    if (response.status !== 204) {
      return Promise.reject('Investigator not deleted.');
    }
  },
};

export default service;
