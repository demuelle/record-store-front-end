import { act, render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import EncounterForm from './EncounterForm';
import service from './service';

const investigators = [
  {
    id: 1,
    firstName: 'Koo',
    lastName: 'Artaern',
  },
  {
    id: 2,
    firstName: 'Test',
    lastName: 'Test',
  },
];

const now = new Date();
const year = now.getFullYear();
const month = new Intl.DateTimeFormat('en-US', { month: 'short' }).format(now);
const day = new Intl.DateTimeFormat('en-US', { day: '2-digit' }).format(now);
const time = new Intl.DateTimeFormat('en-US', {
  hour: '2-digit',
  minute: '2-digit',
})
  .format(now)
  .replace(' ', '');

const encounter = {
  id: 0,
  brief: '',
  details: '',
  dateTime: `${day}-${month}-${year} ${time}`,
  investigators: [],
};

test('should create encounter', async () => {
  const notify = jest.fn();

  jest.spyOn(service, 'findAllInvestigators').mockImplementation(() => {
    return Promise.resolve(investigators);
  });

  jest.spyOn(service, 'addEncounter').mockImplementation(encounter => {
    return Promise.resolve(encounter);
  });

  await act(async () => {
    render(<EncounterForm encounter={encounter} notify={notify} />);
  });

  userEvent.type(document.getElementById('brief'), 'Encounter');

  await act(async () => {
    userEvent.click(document.querySelector('button[type="submit"]'));
  });

  expect(notify).toBeCalled();
});
