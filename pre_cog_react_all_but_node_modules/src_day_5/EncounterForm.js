import { useEffect, useState } from 'react';
import { FormCheck } from 'react-bootstrap';
import service from './service';

function EncounterForm({ encounter: initialEncounter, notify }) {
  const [encounter, setEncounter] = useState(initialEncounter);
  const [investigators, setInvestigators] = useState([]);
  const [error, setError] = useState();
  const isAdd = initialEncounter.id === 0;

  useEffect(() => {
    service
      .findAllInvestigators()
      .then(result => setInvestigators(result))
      .catch(err => setError(err.toString()));
  }, []);

  function handleChange(evt) {
    const clone = { ...encounter };
    if (evt.target.type === 'checkbox') {
      const id = parseInt(evt.target.value, 10);
      const add = evt.target.checked;
      if (add) {
        clone.investigators.push(investigators.find(i => i.id === id));
      } else {
        clone.investigators = clone.investigators.filter(i => i.id !== id);
      }
    } else {
      clone[evt.target.name] = evt.target.value;
    }
    setEncounter(clone);
  }

  function handleSubmit(evt) {
    evt.preventDefault();

    const operation = isAdd ? service.addEncounter : service.updateEncounter;
    operation
      .apply(service, [encounter])
      .then(result =>
        notify({
          action: isAdd ? 'add' : 'edit',
          encounter: isAdd ? result : encounter,
        })
      )
      .catch(err => notify({ error: err.toString() }));
  }

  if (error) {
    return <div className="alert alert-danger">{error}</div>;
  }

  return (
    <>
      <h1>{encounter.id > 0 ? 'Edit' : 'Add'} Encounter</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="brief">Brief</label>
          <input
            type="text"
            id="brief"
            name="brief"
            className="form-control"
            value={encounter.brief}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label htmlFor="details">Details</label>
          <textarea
            id="details"
            name="details"
            className="form-control"
            value={encounter.details}
            onChange={handleChange}
          ></textarea>
        </div>
        <div className="mb-3">
          <label htmlFor="dateTime">Date &amp; Time</label>
          <input
            type="text"
            id="dateTime"
            name="dateTime"
            className="form-control"
            value={encounter.dateTime}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label htmlFor="imageUrl">Image</label>
          <input
            type="url"
            id="imageUrl"
            name="imageUrl"
            className="form-control"
            value={encounter.imageUrl || ''}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <h4>Investigators</h4>
          {investigators.map(i => (
            <FormCheck
              key={i.id}
              id={`investigator_${i.id}`}
              type="checkbox"
              label={`${i.firstName} ${i.lastName}`}
              name="investigators"
              value={i.id}
              checked={
                encounter.investigators.find(inv => inv.id === i.id) !==
                undefined
              }
              onChange={handleChange}
            />
          ))}
        </div>
        <div className="mb-3">
          <button className="btn btn-primary mr-3" type="submit">
            Save
          </button>
          <button
            className="btn btn-secondary"
            type="button"
            onClick={() => notify({ action: 'cancel' })}
          >
            Cancel
          </button>
        </div>
      </form>
    </>
  );
}

export default EncounterForm;
